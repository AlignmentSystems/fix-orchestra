grammar io.fixprotocol.orchestra.dslxtext.Score hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate score "http://www.fixprotocol.io/orchestra/dslxtext/Score"

AnyExpression returns AnyExpression:
	assignmentExp=Assignment
	| orExp=ConditionalOrExpression;

Assignment returns AnyExpression:
	var=Variable assignmentOp=('=' | '*=' | '/=' | '%=' | '+=' | '-=') exp=SimpleExpression;
	
ConditionalOrExpression returns AnyExpression:
	andExp+=ConditionalAndExpression (orOp+=('or' | '||') andExp+=ConditionalAndExpression)*;

ConditionalAndExpression returns AnyExpression:
	condExp+=ConditionalExpression (andOp+=('and' | '&&') condExp+=ConditionalExpression)*;

ConditionalExpression returns AnyExpression:
	left=SimpleExpression
	relationalExp=RelationalExpression
	| setExp=SetExpression
	| rangeExp=RangeExpression;

RelationalExpression:
	 relationalOp=('==' | '!=' | '<' | '<=' | '>=' | '>') right=SimpleExpression;

SetExpression:
	'in' '{' factor+=Factor (',' factor+=Factor)* '}';

RangeExpression:
	'between' min=Factor 'and' max=Factor;

SimpleExpression:
	term+=Term (termOp+=('+' | '-') term+=Term)*;

Term:
	fac1=Factor (factorOp+=('*' | '/' | '%') fac2+=Factor)*;

Factor:
	val=Value
	| var=Variable
	| '(' exp=SimpleExpression ')'
	| integer=INTEGER_LITERAL
	| dec=DECIMAL_LITERAL
	| str=STRING_LITERAL
	| chr=CHARACTER_LITERAL
	| '!' fac=Factor;

Value // immutable
:
	'this' '.' QualifiedId;

Variable // mutable
:
	'$' QualifiedId
	| 'out' '.' QualifiedId;

BooleanLiteral returns AnyExpression:
	{AnyExpression} (istrue?='true'
	| 'false');

QualifiedId:
	name=IDENTIFIER ('.' IDENTIFIER)*;

terminal IDENTIFIER:
	LETTER LETTER_OR_DIGIT*;

terminal DECIMAL_LITERAL:
	DECIMAL_NUMERAL '.' DIGITS?;

terminal INTEGER_LITERAL:
	DECIMAL_NUMERAL INTEGER_TYPE_SUFFIX?;

terminal fragment INTEGER_TYPE_SUFFIX:
	('l' | 'L');

terminal fragment DECIMAL_NUMERAL:
	NON_ZERO_DIGIT DIGITS?;

terminal fragment DIGITS:
	DIGIT (DIGITS_AND_UNDERSCORES? DIGIT)?;

terminal fragment DIGIT:
	'0'
	| NON_ZERO_DIGIT;

terminal fragment NON_ZERO_DIGIT:
	('1'..'9');

terminal fragment DIGITS_AND_UNDERSCORES:
	DIGIT_OR_UNDERSCORE+;

terminal fragment DIGIT_OR_UNDERSCORE:
	DIGIT
	| '_';

terminal fragment UNDERSCORES:
	'_'+;

terminal fragment SIGNED_INTEGER:
	SIGN? DIGITS;

terminal fragment SIGN:
	('+' | '-');

terminal CHARACTER_LITERAL:
	'\'' SINGLE_CHARACTER '\''
	| '\'' ESCAPE_SEQUENCE '\'';

terminal fragment SINGLE_CHARACTER:
	!'\\';

terminal STRING_LITERAL:
	'"' STRING_CHARACTERS? '"';

terminal fragment STRING_CHARACTERS:
	STRING_CHARACTER+;

terminal fragment STRING_CHARACTER:
	!'\\'
	| ESCAPE_SEQUENCE;

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\');

terminal fragment LETTER:
	('a'..'z' | 'A'..'Z' | '_');

terminal fragment LETTER_OR_DIGIT:
	('a'..'z' | 'A'..'Z' | '0'..'9' | '_');

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;
